document.addEventListener("DOMContentLoaded", () => {
  const addToCartButton = document.querySelector(".add-to-cart");
  const sizeButtons = document.querySelectorAll(".size-options button");
  const cartContainer = document.getElementById("cart-container"); // Unde afi탳캒m produsele
  const totalElement = document.getElementById("total"); // Unde afi탳캒m totalul
  const checkoutButton = document.getElementById("checkout-button"); // Buton checkout Stripe

  let selectedSize = null;

  // 游릭 1. Select캒m m캒rimea
  sizeButtons.forEach(button => {
      button.addEventListener("click", function () {
          sizeButtons.forEach(btn => btn.classList.remove("active"));
          this.classList.add("active");
          selectedSize = this.textContent; // Salv캒m m캒rimea aleas캒
      });
  });

  // 游릭 2. Func탵ia pentru actualizarea co탳ului
  function updateCart() {
    const cartContainer = document.getElementById("cart-items");
    const totalContainer = document.getElementById("cart-total");
    cartContainer.innerHTML = ""; // Cur캒탵캒m co탳ul 칥nainte de actualizare

    let total = 0;

    cart.forEach((item, index) => {
        const div = document.createElement("div");
        div.classList.add("cart-item"); // Adaug캒 clas캒 pentru styling
        div.innerHTML = `
            <p>${item.quantity} x ${item.name} - M캒rime: ${item.size} - ${item.price} LEI</p>
            <button class="remove-item" data-index="${index}">탲terge</button>
        `;
        cartContainer.appendChild(div);

        total += item.price * item.quantity;
    });

    totalContainer.textContent = `Total: ${total} LEI`;

    // Eveniment pentru butoanele de 탳tergere
    document.querySelectorAll(".remove-item").forEach(button => {
        button.addEventListener("click", function () {
            const index = this.getAttribute("data-index");
            cart.splice(index, 1);
            updateCart();
        });
    });
}

      });

      totalElement.textContent = `Total: ${total} LEI`;

      // 游릭 3. 탲tergerea produselor din co탳
      document.querySelectorAll(".remove-item").forEach(button => {
          button.addEventListener("click", function () {
              const index = this.getAttribute("data-index");
              cart.splice(index, 1); // Elimin캒m produsul
              localStorage.setItem("cart", JSON.stringify(cart));
              updateCart(); // Actualiz캒m vizual co탳ul
          });
      });
  

  // 游릭 4. Ad캒ugare 칥n co탳
  addToCartButton.addEventListener("click", () => {
      if (!selectedSize) {
          alert("Te rog s캒 selectezi o m캒rime!");
          return;
      }

      let cart = JSON.parse(localStorage.getItem("cart")) || [];


      cart.push(newItem);
      localStorage.setItem("cart", JSON.stringify(cart));
      updateCart(); // Actualiz캒m co탳ul dup캒 ad캒ugare
      alert(`Ad캒ugat 칥n co탳: Tricou Champion - M캒rime ${selectedSize}`);
  });

  // 游릭 5. Ini탵ializ캒m co탳ul la 칥nc캒rcarea paginii
  updateCart();

  // 游릭 6. Integrare Stripe Checkout
  checkoutButton.addEventListener("click", () => {
      let cart = JSON.parse(localStorage.getItem("cart")) || [];
      if (cart.length === 0) {
          alert("Co탳ul este gol! Adaug캒 produse 칥nainte de a continua.");
          return;
      }

      // Preg캒tim produsele pentru Stripe
      let itemsForStripe = cart.map(item => ({
          name: item.name,
          size: item.size,
          price: item.price,
          quantity: item.quantity
      }));

      fetch("https://for-cv-dun.vercel.app/create-checkout-session", {
          method: "POST",
          headers: {
              "Content-Type": "application/json",
          },
          body: JSON.stringify({ items: itemsForStripe }),
      })
      .then((res) => res.json())
      .then(({ url }) => {
          window.location.href = url; // Redirec탵ioneaz캒 utilizatorul c캒tre Stripe Checkout
      })
      .catch((error) => {
          console.error("Eroare la crearea sesiunii checkout:", error);
      });
  });

  
  